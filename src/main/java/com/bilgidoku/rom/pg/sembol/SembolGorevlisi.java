package com.bilgidoku.rom.pg.sembol;


import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;


import com.bilgidoku.rom.ilk.gorevli.GorevliDir;
import com.bilgidoku.rom.shared.err.KnownError;
import com.bilgidoku.rom.shared.gorevli.Uygulama;

public class SembolGorevlisi extends GorevliDir{
	public static final int NO = 53; 

	public static SembolGorevlisi tek() {
		if (tek == null) {
			synchronized (SembolGorevlisi.class) {
				if (tek == null) {
					tek = new SembolGorevlisi();
					tek.giris();
				}
			}
		}
		return tek;
	}

	static SembolGorevlisi tek;
	private SembolGorevlisi() {
		super("Sembol", NO);
	}

	String file = "/home/rompg/rom/phase8/java/rom/src/main/resources/autogenerated/symbols.csv";
	File f;
	Map<String, Integer> symbols = new HashMap<>();
	int max = -1;

	public void kur() throws KnownError {
		try {
			if (Uygulama.tek().isProd()) {
				f = new File(file);
				if (!f.exists()) {
					f.createNewFile();
				}
				readAllSymbols();
			} else {
				f = null;
			}
		} catch (IOException e) {
			throw new KnownError("Sembol dosyasi ile ilgili hata", e);
		}
	}

	private void readAllSymbols() throws KnownError {
		try (BufferedReader br = new BufferedReader(new FileReader(f))) {
			String line = br.readLine();
			while (line != null) {
				String[] ss = line.split(",");
				Integer id = Integer.parseInt(ss[0]);
				if (id > max)
					max = id;
				symbols.put(ss[1], id);
				line=br.readLine();
			}

		} catch (IOException e) { 
			throw new KnownError("Sembol tablosu okunurken", e);
		}
	}

	public int check(String symbol) throws KnownError{
		try {
			Integer var = symbols.get(symbol);
			if (var != null)
				return var;
			return append(symbol);
		}catch(IOException e) {
			throw new KnownError("Error in adding symbol:"+symbol, e);
		}
	}

	private int append(String symbol) throws IOException {
		System.out.println("**********************SYMBOL:" + symbol);
		int cur = max + 1;
		if (!Uygulama.tek().isTest()) {
			BufferedWriter bw = new BufferedWriter(new FileWriter(f, true));
			bw.write(cur + "," + symbol);
			bw.newLine();
			bw.flush();
			bw.close();
		}
		max = cur;
		symbols.put(symbol, cur);
		return cur;

	}

	public String processLine(String line) throws KnownError {
		if (line == null)
			return null;
		int ind = line.indexOf("$-");
		if (ind < 0)
			return line;
		int lastInserted = 0;
		StringBuilder sb = new StringBuilder();
		while (ind >= 0) {
			String toInsert = line.substring(lastInserted, ind);
			sb.append(toInsert);
			lastInserted = ind;

			ind = ind + 2;
			StringBuilder symbolBuilder = new StringBuilder();
			boolean found = false;
			for (int i = 0; i < 150; i++) {
				char c = line.charAt(ind + i);
				if (c == '-') {
					ind = ind + i + 1;
					found = true;
					break;
				}
				if (!Character.isLetterOrDigit(c) && c != '_') {
					// ignore
					break;
				}
				symbolBuilder.append(c);
			}
			if (found) {
				String symbol = symbolBuilder.toString();
				if (symbol.length() != 0) {
					int id = check(symbol);
					sb.append(id);
				}
				lastInserted = ind;
			} else {
				sb.append("$-");
				lastInserted += 2;
				ind = lastInserted;
			}
			ind = line.indexOf("$-", lastInserted);
		}
		if (lastInserted < line.length() - 1) {
			sb.append(line.substring(lastInserted));
		}
		return sb.toString();
	}

//	@Test
//	public void test() throws IOException {
//		assertEquals("okul rest", processLine("okul rest"));
//
//		assertEquals("okul 0rest", processLine("okul $-bir-rest"));
//
//		assertEquals("okul 0rest0", processLine("okul $-bir-rest$-bir-"));
//
//		assertEquals("okul $-bir hodo", processLine("okul $-bir hodo"));
//		assertEquals("okul $-bir 1devami", processLine("okul $-bir $-hodo-devami"));
//	}

}
